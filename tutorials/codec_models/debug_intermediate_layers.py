import tvm.relay as relay
import numpy as np
# import torch

def convTranspose(input, stride, padding):
    weight = np.load('weight.npy')
    in_ch, out_ch, w_h, w_w = weight.shape

    # in_h, in_w = input.shape[2], input.shape[3]
    # out_h, out_w = w_h + stride * (in_h - 1), w_w + stride * (in_w - 1)
    # result = np.zeros((1, out_ch, out_h, out_w), dtype=np.int32)
    # for i in range(out_ch):
    #     for j in range(in_ch):
    #         for h in range(in_h):
    #             for w in range(in_w):
    #                 tmp_img = input[0, j, h, w] * weight[j, i, :, :]
    #                 result[0, i, stride * h : stride * h + w_h, stride * w : stride * w + w_w] += tmp_img
    # print ('before padding: ', result[0, 0, :, :])
    # result = result[:, :, padding : -padding, padding : -padding]

    module = torch.nn.ConvTranspose2d(in_ch, out_ch, (w_h, w_w), stride=stride, padding=padding)
    sd = module.state_dict()
    sd['weight'].copy_(torch.from_numpy(weight.astype(np.float32)))
    sd['bias'].copy_(torch.zeros((out_ch,)))
    with torch.no_grad():
        result = module(torch.from_numpy(input.astype(np.float32))).numpy()

    return result

def testAddBias(input):
    bias = np.load('bias.npy')
    chl = input.shape[1]
    result = input.copy()
    for i in range(chl):
        result[0, i, :, :] = input[0, i, :, :] + bias[i]
    return result

def loadAndPrintLayers(file_name):
    # file_name is the path to output_tensors.params (generated by GraphModuleDebug)
    with open(file_name, 'rb') as fin:
        content = fin.read()

    result = relay.load_param_dict(bytearray(content))
    # print (result)
    # for k, v in result.items():
    #     print (k, ':', v)

    arr1 = result['tvmgen_default_fused_clip_3____topo-index:38____output-num:0'].numpy()
    # arr1 = np.load('mul_weight.npy')
    # arr1 = convTranspose(arr1.astype(np.int32), 1, 1)
    # arr1 = testAddBias(arr1)
    # arr1 = arr1 * np.load('mul_weight.npy')
    # arr1 = arr1 >> 19
    # arr1 = arr1.clip(0, 63)
    # arr1 = np.where(arr1 >= 0, arr1, 0)
    # arr1 = arr1.reshape(-1)
    arr2 = result['tvmgen_default_fused_cast_2_1____topo-index:39____output-num:0'].numpy()
    # arr2 = arr2.reshape(-1)

    diff = np.abs(np.float64(arr1) - np.float64(arr2)).reshape(-1)
    print (diff.max(), diff.min(), diff.mean())

    # print (arr1.shape, arr1.dtype)
    # print (arr1)
    # print (arr2.shape, arr2.dtype)
    # print (arr2)

if __name__ == '__main__':
    loadAndPrintLayers('./debug_prequant_z_decoder_int/_tvmdbg_device_CPU_0/output_tensors.params')
